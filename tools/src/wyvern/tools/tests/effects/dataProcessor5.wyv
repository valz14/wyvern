module def dataProcessor5(net : effects.NetworkType01, stdout : Stdout)
effect send = {} // same as net.send
effect process = {net.receive, send}
effect receive = {} // to add confusion to the mix
effect genN = {}
def genNum() : { genN, receive } Int
    3
def processData() : {process, genN, receive} Unit
    stdout.print("dataProcessor5 w/ multiple layers of effect abstraction: \n")
    val n : Int = genNum()
    net.receiveData()
    stdout.print("data processed\n")
    net.sendData("from dataProcessor5...\n") // send==net.send=={}
    stdout.print("dataProcessor5 done!\n")